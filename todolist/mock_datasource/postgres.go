// Code generated by MockGen. DO NOT EDIT.
// Source: datasource/postgres.go

// Package mock_datasource is a generated GoMock package.
package mock_datasource

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ent "github.com/k0825/go-gin-ent-sample/ent"
)

// MockRDBConnectionInterface is a mock of RDBConnectionInterface interface.
type MockRDBConnectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRDBConnectionInterfaceMockRecorder
}

// MockRDBConnectionInterfaceMockRecorder is the mock recorder for MockRDBConnectionInterface.
type MockRDBConnectionInterfaceMockRecorder struct {
	mock *MockRDBConnectionInterface
}

// NewMockRDBConnectionInterface creates a new mock instance.
func NewMockRDBConnectionInterface(ctrl *gomock.Controller) *MockRDBConnectionInterface {
	mock := &MockRDBConnectionInterface{ctrl: ctrl}
	mock.recorder = &MockRDBConnectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDBConnectionInterface) EXPECT() *MockRDBConnectionInterfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockRDBConnectionInterface) Begin(ctx context.Context) (*ent.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(*ent.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockRDBConnectionInterfaceMockRecorder) Begin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockRDBConnectionInterface)(nil).Begin), ctx)
}

// Commit mocks base method.
func (m *MockRDBConnectionInterface) Commit(tx *ent.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRDBConnectionInterfaceMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRDBConnectionInterface)(nil).Commit), tx)
}

// GetClient mocks base method.
func (m *MockRDBConnectionInterface) GetClient() *ent.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*ent.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRDBConnectionInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRDBConnectionInterface)(nil).GetClient))
}

// GetTx mocks base method.
func (m *MockRDBConnectionInterface) GetTx(ctx context.Context) *ent.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", ctx)
	ret0, _ := ret[0].(*ent.Client)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockRDBConnectionInterfaceMockRecorder) GetTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockRDBConnectionInterface)(nil).GetTx), ctx)
}

// Rollback mocks base method.
func (m *MockRDBConnectionInterface) Rollback(tx *ent.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRDBConnectionInterfaceMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRDBConnectionInterface)(nil).Rollback), tx)
}

// RunInTx mocks base method.
func (m *MockRDBConnectionInterface) RunInTx(ctx context.Context, f func(context.Context) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MockRDBConnectionInterfaceMockRecorder) RunInTx(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*MockRDBConnectionInterface)(nil).RunInTx), ctx, f)
}
